import { Pool, neonConfig } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import { eq, and, or } from 'drizzle-orm';
import ws from "ws";
import * as schema from "../shared/schema";

neonConfig.webSocketConstructor = ws;

if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL must be set. Did you forget to provision a database?");
}

const pool = new Pool({ connectionString: process.env.DATABASE_URL });
const db = drizzle({ client: pool, schema });

// Comprehensive mapping of Swedish cities to their correct regions (l√§n)
const cityRegionMapping: Record<string, string> = {
  // Sk√•ne l√§n
  'Markaryd': 'Kronobergs l√§n',
  'Halmstad': 'Halland',
  'Helsingborg': 'Sk√•ne',
  'Malm√∂': 'Sk√•ne',
  'Kristianstad': 'Sk√•ne',
  'Landskrona': 'Sk√•ne',
  'Lund': 'Sk√•ne',
  'Trelleborg': 'Sk√•ne',
  'Ystad': 'Sk√•ne',
  '√Ñngelholm': 'Sk√•ne',
  'H√∂gan√§s': 'Sk√•ne',
  'Arl√∂v': 'Sk√•ne',
  'Bj√§rnum': 'Sk√•ne',
  'Esl√∂v': 'Sk√•ne',
  'Klippan': 'Sk√•ne',
  'K√§vlinge': 'Sk√•ne',
  'Limhamn': 'Sk√•ne',
  'Lomma': 'Sk√•ne',
  'L√∂ddek√∂pinge': 'Sk√•ne',
  'Osby': 'Sk√•ne',
  'Perstorp': 'Sk√•ne',
  'Simrishamn': 'Sk√•ne',
  'Skurup': 'Sk√•ne',
  'Staffanstorp': 'Sk√•ne',
  'Sval√∂v': 'Sk√•ne',
  'Svedala': 'Sk√•ne',
  'S√∂lvesborg': 'Sk√•ne',
  'Vellinge': 'Sk√•ne',
  '√Östorp': 'Sk√•ne',
  '√ñrkelljunga': 'Sk√•ne',
  '√ñstra Ljungby': 'Sk√•ne',
  'Brom√∂lla': 'Sk√•ne',
  'B√•stad': 'Sk√•ne',
  'D√∂sjebro': 'Sk√•ne',
  'Finja': 'Sk√•ne',
  'Fj√§lkinge': 'Sk√•ne',
  'Knislinge': 'Sk√•ne',
  'M√∂rarp': 'Sk√•ne',
  'M√∂rrum': 'Sk√•ne',
  'Sk√•nes Fagerhult': 'Sk√•ne',
  'Tollarp': 'Sk√•ne',
  'Vall√•kra': 'Sk√•ne',

  // Uppsala l√§n
  'Uppsala': 'Uppsala',
  'Enk√∂ping': 'Uppsala',
  'Tierp': 'Uppsala',
  '√Ñlvkarleby': 'Uppsala',
  '√ñsthammar': 'Uppsala',
  'Heby': 'Uppsala',
  'H√•bo': 'Uppsala',
  'Knivsta': 'Uppsala',
  'Alunda': 'Uppsala',
  'Bj√∂rklinge': 'Uppsala',
  '√ñrbyhus': 'Uppsala',
  '√ñsterbybruk': 'Uppsala',

  // V√§stmanland
  'V√§ster√•s': 'V√§stmanland',
  'K√∂ping': 'V√§stmanland',
  'Fagersta': 'V√§stmanland',
  'Hallstahammar': 'V√§stmanland',
  'Kungs√∂r': 'V√§stmanland',
  'Norberg': 'V√§stmanland',
  'Sala': 'V√§stmanland',
  'Arboga': 'V√§stmanland',
  'Surahammar': 'V√§stmanland',
  'B√•lsta': 'V√§stmanland',
  'Virsbo': 'V√§stmanland',

  // √ñsterg√∂tland
  'Link√∂ping': '√ñsterg√∂tland',
  'Norrk√∂ping': '√ñsterg√∂tland',
  'Motala': '√ñsterg√∂tland',
  'Mj√∂lby': '√ñsterg√∂tland',
  'Finsp√•ng': '√ñsterg√∂tland',
  'Katrineholm': '√ñsterg√∂tland',
  'Vadstena': '√ñsterg√∂tland',
  '√Ötvidaberg': '√ñsterg√∂tland',
  '√ñdesh√∂g': '√ñsterg√∂tland',
  'Boxholm': '√ñsterg√∂tland',
  'Kinda': '√ñsterg√∂tland',
  'Valdemarsvik': '√ñsterg√∂tland',
  'Vikingstad': '√ñsterg√∂tland',
  'Borensberg': '√ñsterg√∂tland',
  'Rimforsa': '√ñsterg√∂tland',
  'Ringarum': '√ñsterg√∂tland',
  'Sk√§nninge': '√ñsterg√∂tland',
  'Vikingstad': '√ñsterg√∂tland',
  '√ñverum': '√ñsterg√∂tland',

  // V√§stra G√∂taland
  'G√∂teborg': 'V√§stra G√∂taland',
  'Bor√•s': 'V√§stra G√∂taland',
  'Trollh√§ttan': 'V√§stra G√∂taland',
  'Uddevalla': 'V√§stra G√∂taland',
  'M√∂lndal': 'V√§stra G√∂taland',
  'Partille': 'V√§stra G√∂taland',
  'Alings√•s': 'V√§stra G√∂taland',
  'Kungsbacka': 'V√§stra G√∂taland',
  'Lerum': 'V√§stra G√∂taland',
  'Stenungsund': 'V√§stra G√∂taland',
  '√ñcker√∂': 'V√§stra G√∂taland',
  'Tj√∂rn': 'V√§stra G√∂taland',
  'Orust': 'V√§stra G√∂taland',
  'Soten√§s': 'V√§stra G√∂taland',
  'Munkedal': 'V√§stra G√∂taland',
  'Tanum': 'V√§stra G√∂taland',
  'Dals-Ed': 'V√§stra G√∂taland',
  'F√§rgelanda': 'V√§stra G√∂taland',
  'Ale': 'V√§stra G√∂taland',
  'Lerum': 'V√§stra G√∂taland',
  'V√•rg√•rda': 'V√§stra G√∂taland',
  'Bollebygd': 'V√§stra G√∂taland',
  'Gr√§storp': 'V√§stra G√∂taland',
  'Essunga': 'V√§stra G√∂taland',
  'Karlsborg': 'V√§stra G√∂taland',
  'Gullsp√•ng': 'V√§stra G√∂taland',
  'Tranemo': 'V√§stra G√∂taland',
  'Bengtsfors': 'V√§stra G√∂taland',
  'Mellerud': 'V√§stra G√∂taland',
  'Lilla Edet': 'V√§stra G√∂taland',
  'Mark': 'V√§stra G√∂taland',
  'Svenljunga': 'V√§stra G√∂taland',
  'Herrljunga': 'V√§stra G√∂taland',
  'Vara': 'V√§stra G√∂taland',
  'G√∂tene': 'V√§stra G√∂taland',
  'Tibro': 'V√§stra G√∂taland',
  'T√∂reboda': 'V√§stra G√∂taland',
  'Mariestad': 'V√§stra G√∂taland',
  'Lidk√∂ping': 'V√§stra G√∂taland',
  'Skara': 'V√§stra G√∂taland',
  'Sk√∂vde': 'V√§stra G√∂taland',
  'Hjo': 'V√§stra G√∂taland',
  'Tidaholm': 'V√§stra G√∂taland',
  'Falk√∂ping': 'V√§stra G√∂taland',
  'Kv√§num': 'V√§stra G√∂taland',
  'V√§nersborg': 'V√§stra G√∂taland',
  'Kung√§lv': 'V√§stra G√∂taland',
  'V√§stra Fr√∂lunda': 'V√§stra G√∂taland',
  'V√§strafr√∂lunda': 'V√§stra G√∂taland',
  'Sm√∂gen': 'V√§stra G√∂taland',
  'Br√§mhult': 'V√§stra G√∂taland',
  'H√§rryda': 'V√§stra G√∂taland',

  // Kronobergs l√§n
  'V√§xj√∂': 'Kronobergs l√§n',
  'Ljungby': 'Kronobergs l√§n',
  '√Ñlmhult': 'Kronobergs l√§n',
  'Tingsryd': 'Kronobergs l√§n',
  'Alvesta': 'Kronobergs l√§n',
  'Lessebo': 'Kronobergs l√§n',
  'Uppvidinge': 'Kronobergs l√§n',
  'Lammhult': 'Kronobergs l√§n',
  'Markaryd': 'Kronobergs l√§n',

  // Halland
  'Halmstad': 'Halland',
  'Varberg': 'Halland',
  'Kungsbacka': 'Halland',
  'Falkenberg': 'Halland',
  'Laholm': 'Halland',
  'Hylte': 'Halland',
  'Onsala': 'Halland',

  // V√§rmland
  'Karlstad': 'V√§rmland',
  'Arvika': 'V√§rmland',
  'Filipstad': 'V√§rmland',
  'Hammar√∂': 'V√§rmland',
  'Kil': 'V√§rmland',
  'Forshaga': 'V√§rmland',
  'Grums': 'V√§rmland',
  '√Örj√§ng': 'V√§rmland',
  'Sunne': 'V√§rmland',
  'Torsby': 'V√§rmland',
  'Storfors': 'V√§rmland',
  'Hagfors': 'V√§rmland',
  'Munkfors': 'V√§rmland',
  'Kristinehamn': 'V√§rmland',
  'Degerfors': 'V√§rmland',

  // Add more mappings as needed for other regions...
};

async function fixRegionalClassifications() {
  try {
    console.log('Starting comprehensive regional classification fixes...\n');

    let totalUpdates = 0;
    const updateLog: string[] = [];

    // Process each city in our mapping
    for (const [city, correctRegion] of Object.entries(cityRegionMapping)) {
      try {
        // Find companies with this location that have incorrect region
        const incorrectlyClassified = await db.query.companies.findMany({
          where: and(
            eq(schema.companies.location, city),
            eq(schema.companies.region, 'Stockholm') // Most incorrect classifications seem to be Stockholm
          )
        });

        if (incorrectlyClassified.length > 0) {
          // Update all companies in this city to the correct region
          const result = await db.update(schema.companies)
            .set({ region: correctRegion })
            .where(and(
              eq(schema.companies.location, city),
              eq(schema.companies.region, 'Stockholm')
            ));

          console.log(`‚úì Fixed ${incorrectlyClassified.length} companies in ${city}: Stockholm ‚Üí ${correctRegion}`);
          updateLog.push(`${city}: ${incorrectlyClassified.length} companies moved from Stockholm to ${correctRegion}`);
          totalUpdates += incorrectlyClassified.length;
        }
      } catch (error) {
        console.error(`‚úó Error updating ${city}:`, error);
      }
    }

    // Special cases for specific incorrect mappings we found
    const specialCases = [
      // Fix postal code prefixes that are clearly wrong
      { condition: { location: '017 Eringsboda' }, update: { region: 'Blekinge', location: 'Eringsboda' } },
      { condition: { location: '041 Liden' }, update: { region: 'V√§sternorrland', location: 'Liden' } },
      { condition: { location: '132 Huskvarna' }, update: { region: 'J√∂nk√∂pings l√§n', location: 'Huskvarna' } },
      { condition: { location: '236 Romakloster' }, update: { region: 'Gotland', location: 'Romakloster' } },
      { condition: { location: '510 Eskilstuna' }, update: { region: 'S√∂dermanland', location: 'Eskilstuna' } },
      { condition: { location: '722 S√∂drasandby' }, update: { region: 'Sk√•ne', location: 'S√∂dra Sandby' } },
    ];

    for (const specialCase of specialCases) {
      try {
        const companies = await db.query.companies.findMany({
          where: and(
            eq(schema.companies.location, specialCase.condition.location),
            eq(schema.companies.region, 'Stockholm')
          )
        });

        if (companies.length > 0) {
          await db.update(schema.companies)
            .set({
              region: specialCase.update.region,
              location: specialCase.update.location
            })
            .where(and(
              eq(schema.companies.location, specialCase.condition.location),
              eq(schema.companies.region, 'Stockholm')
            ));

          console.log(`‚úì Fixed special case: ${specialCase.condition.location} ‚Üí ${specialCase.update.location}, ${specialCase.update.region}`);
          updateLog.push(`Special: ${specialCase.condition.location} ‚Üí ${specialCase.update.location}, ${specialCase.update.region}`);
          totalUpdates += companies.length;
        }
      } catch (error) {
        console.error(`‚úó Error updating special case ${specialCase.condition.location}:`, error);
      }
    }

    console.log('\n=== Regional Classification Fix Summary ===');
    console.log(`‚úì Total companies updated: ${totalUpdates}`);
    console.log(`üìä Total mapping rules applied: ${Object.keys(cityRegionMapping).length + specialCases.length}`);

    if (updateLog.length > 0) {
      console.log('\n=== Detailed Update Log ===');
      updateLog.forEach(log => console.log(`  ‚Ä¢ ${log}`));
    }

    // Show current region distribution after fixes
    console.log('\n=== Current Region Distribution (after fixes) ===');
    const regionCounts = await db.query.companies.findMany({
      columns: {
        region: true
      }
    });

    const regionStats = regionCounts.reduce((acc, company) => {
      acc[company.region] = (acc[company.region] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    Object.entries(regionStats)
      .sort(([,a], [,b]) => b - a)
      .forEach(([region, count]) => {
        console.log(`  ${region}: ${count} companies`);
      });

  } catch (error) {
    console.error('Error fixing regional classifications:', error);
  } finally {
    await pool.end();
  }
}

fixRegionalClassifications();